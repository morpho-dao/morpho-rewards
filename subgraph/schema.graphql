type User @entity {
  "<userAddress>"
  id: ID!
  address: Bytes!
  balances: [Balance!] @derivedFrom(field: "user")
  transactions: [Transaction!] @derivedFrom(field: "user")
}

type Market @entity {
  "<marketAddress>"
  id: ID!
  address: Bytes!

  supplyIndex: BigInt!
  poolSupplyIndex: BigInt!
  p2pSupplyIndex: BigInt!
  supplyUpdateBlockTimestamp: BigInt!

  borrowIndex: BigInt!
  poolBorrowIndex: BigInt!
  p2pBorrowIndex: BigInt!
  borrowUpdateBlockTimestamp: BigInt!

  lastPoolSupplyIndex: BigInt!
  lastP2PSupplyIndex: BigInt!
  lastPoolBorrowIndex: BigInt!
  lastP2PBorrowIndex: BigInt!
  lastTotalSupply: BigInt!
  lastTotalBorrow: BigInt!

  scaledSupplyOnPool: BigInt!
  scaledSupplyInP2P: BigInt!
  scaledBorrowOnPool: BigInt!
  scaledBorrowInP2P: BigInt!
}

type Balance @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: Int!
  market: Market!
  user: User!

  "V1 distribution mechanism supply index"
  userSupplyIndex: BigInt!
  "V1 distribution mechanism borrow index"
  userBorrowIndex: BigInt!
  "V1 distribution mechanism supply normalizer"
  underlyingSupplyBalance: BigInt!
  "V1 distribution mechanism borrow normalizer"
  underlyingBorrowBalance: BigInt!

  "V2 distribution mechanism supply on pool normalizer"
  scaledSupplyOnPool: BigInt!
  "V2 distribution mechanism supply in p2p normalizer"
  scaledSupplyInP2P: BigInt!
  "V2 distribution mechanism borrow on pool normalizer"
  scaledBorrowOnPool: BigInt!
  "V2 distribution mechanism borrow in p2p normalizer"
  scaledBorrowInP2P: BigInt!

  "V2 distribution mechanism supply on pool index"
  userSupplyOnPoolIndex: BigInt!
  "V2 distribution mechanism supply in p2p index"
  userSupplyInP2PIndex: BigInt!
  "V2 distribution mechanism borrow on pool index"
  userBorrowOnPoolIndex: BigInt!
  "V2 distribution mechanism borrow in p2p index"
  userBorrowInP2PIndex: BigInt!
  "Number of MORPHO accumulated at the last transaction of the user"
  accumulatedMorpho: BigInt!

  "Number of MORPHO accumulated at the last transaction of the user from supply position"
  accumulatedSupplyMorpho: BigInt!

  "Number of MORPHO accumulated at the last transaction of the user from borrow position"
  accumulatedBorrowMorpho: BigInt!
}

type Transaction @entity {
  "<txHash>"
  id: ID!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: Int!
  market: Market!
  user: User!
  type: TransactionType!
  target: Bytes!
  logIndex: BigInt!
  scaledOnPool: BigInt!
  scaledInP2P: BigInt!
  underlyingSupplyBalance: BigInt!
  underlyingBorrowBalance: BigInt!
}
type MarketEpochDistribution @entity {
  "<epochId>-<market>"
  id: ID!
  timestamp: BigInt!
  market: Market!
  epoch: String!
  marketSide: String!
  index: BigInt!
  speed: BigInt!
  poolIndex: BigInt!
  p2pIndex: BigInt!
  poolSpeed: BigInt!
  p2pSpeed: BigInt!
  totalScaledP2P: BigInt!
  totalScaledPool: BigInt!
  isFinished: Boolean!
}

enum TransactionType {
  Supply
  Borrow
  Withdraw
  Repay
}
